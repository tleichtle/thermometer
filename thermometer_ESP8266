// REQUIRES the following Arduino libraries:
// - Adafruit Unified Sensor Lib: https://github.com/adafruit/Adafruit_Sensor
// - ArduinoJson Lib: https://github.com/bblanchon/ArduinoJson
// - DHT Sensor Library: https://github.com/adafruit/DHT-sensor-library
// - ???

#include <ArduinoJson.h>
#include <DHT.h>
#include <ESP8266mDNS.h>
#include <ESP8266WebServer.h>
#include <ESP8266WiFi.h>

#include "private/WifiCredentials.h"

#define DHT_PIN 2
//#define DHT_TYPE DHT11
#define DHT_TYPE DHT22
#define HTTP_SERVER_PORT 80
#define JSON_BUFFER_SIZE 64

namespace {

// The name of this smart sensor in the network.
constexpr char SensorName[] = "ThermoSens8266";

// Those variables are defined in "private/WifiCredentials.h".
// constexpr char Essid[] = "<YourWifiName>";
// constexpr char WifiPassword[] = "<YourWifiPassword>";

// Global variables.
DHT dht(DHT_PIN, DHT_TYPE);
ESP8266WebServer server(HTTP_SERVER_PORT);

void connectWifi(const char *essid, const char *password) noexcept
{
    /* Explicitly set the ESP8266 to be a WiFi-client, otherwise, it by default,
     * would try to act as both a client and an access-point and could cause
     * network-issues with your other WiFi-devices on your WiFi-network. */
    WiFi.mode(WIFI_STA);
    WiFi.begin(essid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(F("."));
    }
    Serial.print(F("Connected to "));
    Serial.println(essid);
    Serial.print(F("IP address: "));
    Serial.println(WiFi.localIP());
}

void handleRoot() noexcept
{
    Serial.println(F("Got request. Preparing response"));

    // Reading temperature or humidity takes about 250 milliseconds!
    // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor).
    float humidity = dht.readHumidity();
    float tempDegree = dht.readTemperature();

    StaticJsonDocument<JSON_BUFFER_SIZE> jsonDoc;
    jsonDoc["humidity"] = humidity;
    jsonDoc["temperature"] = tempDegree;

    String httpResponse;
    serializeJson(jsonDoc, httpResponse);

    server.send(200, "text/json", httpResponse);
    Serial.println(F("Response sent"));
}

} // anonymous namespace


void setup()
{
    Serial.begin(115200);
    Serial.println();
    Serial.println(F("Starting up..."));

    pinMode(DHT_PIN, INPUT);
    dht.begin();

    if (!MDNS.begin(SensorName)) {
        Serial.println(F("Cannot set MDNS hostname!"));
    }
    connectWifi(Essid, WifiPassword);

    server.on("/", handleRoot);
    server.begin();
    Serial.println("Server started :)");
}

void loop()
{
    server.handleClient();
}
